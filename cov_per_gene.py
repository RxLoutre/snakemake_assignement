"""
---------------------------------------------------
Author  : Roxane Boyer
Purpose : Calculate coverage statistic aggregated
          per gene 
---------------------------------------------------
"""

# -------- Imports -------- #
import argparse
import csv

# -------- Classes -------- #
class bedcov_hist:
    def __init__(self,depth,nbOcc,pctQuery):
        self.depth = depth
        self.nbOcc = nbOcc
        self.pctQuery = pctQuery

    def __str__(self):
        s = str(self.depth) + " " +  str(self.nbOcc) + " " +  str(self.pctQuery)
        return s

class gene_cov_info:
    def __init__(self,name,querySize,listRecords):
        self.name = name
        self.querySize = querySize
        self.listRecords = listRecords
        self.nbRecords = len(listRecords)

    def __str__(self):
        s = "Gene name : " + str(self.name) +\
            "\nSize extended exon" + str(self.querySize) +\
            "\nNb records : " + str(self.nbRecords)
        return s

    def show_records(self):
        s = ""
        for x in range(self.nbRecords):
            s += str(self.listRecords[x])
        return s

def get_arguments():
	"""Parsing the arguments"""
	parser = argparse.ArgumentParser(description="",
                                     usage='''
______________________________________________________________________
A tool to calculate coverage statistic per gene. Input is a bedcov file
generated by betools coverage with the -hist option.
______________________________________________________________________
Generic command: python3 cov_per_gene.py -i [input_bedcov] -o [output_csv]

Mandatory arguments:
    -i   The input file generated by bedtools coverage -hist
    -o   The output file in csv format, each field seperated by a coma
        
Output:
    GeneID,MeanCoverage,MedianCoverage,PCTCoverageMin30X

______________________________________________________________________
''')
	parser.add_argument("-i", "--input", help="The input file generated by bedtools coverage -hist", required=True)
	parser.add_argument("-o", "--output", help="The output file in csv format, each field seperated by a coma", required=True)
	return (parser.parse_args())

def read_bedcov(input):
    try:
        with open(input, 'r') as f:
            csv_reader = csv.reader(f, delimiter='\t')
            
            
            line = f.readline()
    except Exception as e :
        print('Uh oh, something went wrong there :(. More details below')
        print(e, exc_info=True)
        raise
    finally:
        f.close()
