"""
---------------------------------------------------
Author  : Roxane Boyer
Purpose : Calculate coverage statistic aggregated
          per gene 
---------------------------------------------------
"""

# -------- Imports -------- #
import argparse
import traceback
import math
from csv import reader

# -------- Classes -------- #
class Bedcov_hist_records:
    def __init__(self,depth,nbOcc,pctQuery):
        self.depth = depth
        self.nbOcc = nbOcc
        self.pctQuery = pctQuery

    def __str__(self):
        s = str(self.depth) + " " +  str(self.nbOcc) + " " + str(self.pctQuery)
        return s

class Gene_cov_info:
    def __init__(self,querySize):
        self.querySize = querySize
        self.mean = 0
        self.median = 0
        self.pct30x = 0
        self.listRecords = []

    def __str__(self):
        s = "Query size : " + str(self.querySize) + \
            "\nNb records : " + str(len(self.listRecords))
        return s

    def add_record(self,record):
        self.listRecords.append(record)

    def show_records(self):
        s = ""
        for x in range(len(self.listRecords)):
            s += str(self.listRecords[x]) + "\n"
        return s

 #   def compute_stats(self):
 #       for record in self.listRecords:

def get_arguments():
	"""Parsing the arguments"""
	parser = argparse.ArgumentParser(description="",
                                     usage='''
______________________________________________________________________
A tool to calculate coverage statistic per gene. Input is a bedcov file
generated by betools coverage with the -hist option.
______________________________________________________________________
Generic command: python3 cov_per_gene.py -i [input_bedcov] -o [output_csv]

Mandatory arguments:
    -i   The input file generated by bedtools coverage -hist
    -o   The output file in csv format, each field seperated by a coma
        
Output:
    GeneID,MeanCoverage,MedianCoverage,PCTCoverageMin30X

______________________________________________________________________
''')
	parser.add_argument("-i", "--input", help="The input file generated by bedtools coverage -hist", required=True)
	parser.add_argument("-o", "--output", help="The output file in csv format, each field seperated by a coma", required=True)
	return (parser.parse_args())

def read_bedcov(input):
    genes_info = {}
    try:
        with open(input, 'r') as f:
            csv_reader = reader(f, delimiter='\t')
            for row in csv_reader:
                c_gene_name = row[3]
                c_depth = row[8]
                c_nbocc = row[9]
                c_querysize = row[10]
                c_pctquery = row[11]
                c_record = Bedcov_hist_records(c_depth,c_nbocc,c_pctquery)
                c_gene_cov_info = Gene_cov_info(c_querysize)
                if not c_gene_name in genes_info.keys():
                    print("Gene "+c_gene_name+" not in dic for now.")
                    genes_info[c_gene_name] = []
                    genes_info[c_gene_name].append(c_gene_cov_info)
                    genes_info[c_gene_name][0].add_record(c_record)
                else:
                    if not c_gene_cov_info in genes_info[c_gene_name]:
                        #print("Adding a new entry to key "+c_gene_name+" which is "+str(c_gene_cov_info))
                        genes_info[c_gene_name].append(c_gene_cov_info)
                        #print("Now adding record "+str(c_record)+" to list elem nb "+str(len(genes_info[c_gene_name])-1))
                        genes_info[c_gene_name][len(genes_info[c_gene_name])-1].add_record(c_record)
                    else:
                        #print("Adding a new record to entry "+c_gene_cov_info+" which is "+str(c_record))
                        genes_info[c_gene_name][len(genes_info[c_gene_name])-1].add_record(c_record)
    except Exception as e :
        print('Uh oh, something went wrong there :(. More details below')
        traceback.print_exc()
        raise
    finally:
        f.close()
        return genes_info


test_file = "/Users/roxaneboyer/Bioinformatic/data/vUMC/nice_otter/NA12878_ERATPLUS_10GB.refseq.bedcov.test"
dict = read_bedcov(test_file)
print(len(dict["DDX11L1:NR_046018.2"]))
print(dict["DDX11L1:NR_046018.2"][0])

