"""
---------------------------------------------------
Author  : Roxane Boyer
Purpose : Calculate coverage statistic aggregated
          per gene 
---------------------------------------------------
"""

# -------- Imports -------- #
import argparse
import traceback
import math
import csv

# -------- Classes -------- #
class Hist_record:
    def __init__(self,depth,nbOcc,pctQuery):
        self.depth = depth
        self.nbOcc = nbOcc
        self.pctQuery = pctQuery

    def __str__(self):
        s = str(self.depth) + " " +  str(self.nbOcc) + " " + str(self.pctQuery)
        return s

class Gene_cov_info:
    def __init__(self,querySize):
        self.querySize = querySize
        self.mean = 0
        self.median = 0
        self.pct30x = 0
        self.listRecords = []

    def __str__(self):
        s = "Query size : " + str(self.querySize) + \
            "\nNb records : " + str(len(self.listRecords))
        return s

    def add_record(self,record):
        self.listRecords.append(record)

    def show_records(self):
        s = ""
        for x in range(len(self.listRecords)):
            s += str(self.listRecords[x]) + "\n"
        return s

 #   def compute_stats(self):
 #       for record in self.listRecords:

def get_arguments():
	"""Parsing the arguments"""
	parser = argparse.ArgumentParser(description="",
                                     usage='''
______________________________________________________________________
A tool to calculate coverage statistic per gene. Input is a bedcov file
generated by betools coverage with the -hist option.
______________________________________________________________________
Generic command: python3 cov_per_gene.py -i [input_bedcov] -o [output_csv]

Mandatory arguments:
    -i   The input file generated by bedtools coverage -hist
    -o   The output file in csv format, each field seperated by a coma
        
Output:
    GeneID,MeanCoverage,MedianCoverage,PCTCoverageMin30X

______________________________________________________________________
''')
	parser.add_argument("-i", "--input", help="The input file generated by bedtools coverage -hist", required=True)
	parser.add_argument("-o", "--output", help="The output file in csv format, each field seperated by a coma", required=True)
	return (parser.parse_args())

def read_bedcov(input,output):
    current_gene_name = ""
    current_section = (0,0)
    current_section_size = 0
    cumulated_cov = 0
    mean = 0
    pct30x = 0
    cumulated_base_30x = 0
    try:
        with open(input, 'r') as inp_file, open(output, 'w') as out:
            csv_reader = csv.reader(inp_file, delimiter='\t')
            writer = csv.writer(out, delimiter='\t')
            writer.writerow(['GeneName','MeanCoverage','PCT30X'])
            for row in csv_reader:
                line = csv_reader.line_num
                #Reading all attributes of this record
                section = (row[1],row[2])
                gene_name = row[3]
                depth = row[8]
                nbocc = row[9]
                size = row[10]
                pctquery = row[11]
                #Initialize the current gene to the first gene in the table
                if line == 1:
                    print("Initializing...")
                    current_gene_name = gene_name
                    current_section = section
                    current_section_size = int(size)
                    if int(depth) >= 30:
                        cumulated_base_30x = int(size)
                #We are parsing through the info of a new gene ! Saving all informations of the previous gene in a file
                if not gene_name == current_gene_name:
                    mean = int(int(cumulated_cov) / int(current_section_size))
                    pct30x = (int(cumulated_base_30x) / int(current_section_size)) * 100
                    writer.writerow([str(current_gene_name),str(mean),str(pct30x)])
                    current_gene_name = gene_name
                    cumulated_cov = int(depth) * int(nbocc)
                    current_section = section
                    current_section_size = int(size)
                    if int(depth) >= 30:
                        cumulated_base_30x = int(size)
                    else:
                        cumulated_base_30x = 0
                 #We are still parsing informations from the same gene, keep adding numbers !
                else:
                    cumulated_cov += int(depth) * int(nbocc)
                    #Iw we change section, add the new size
                    if not section == current_section:
                        print("Switching to section : {}".format(section))
                        current_section_size += int(size)
                        current_section = section
                        if int(depth) >= 30:
                            cumulated_base_30x += int(size)
            writer.writerow([str(current_gene_name),str(mean),str(pct30x)])
    except Exception as e :
        print('Uh oh, something went wrong there :(. More details below')
        traceback.print_exc()
        raise


#test_file = "/Users/roxaneboyer/Bioinformatic/data/vUMC/nice_otter/NA12878_ERATPLUS_10GB.refseq.bedcov.BRCA1.test"
#test_outfile = "/Users/roxaneboyer/Bioinformatic/data/vUMC/nice_otter/NA12878_ERATPLUS_10GB.refseq.bedstats.BRCA1.test"
#dict = read_bedcov(test_file,test_outfile)


